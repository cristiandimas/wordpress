# Pipeline para integrar aplicaciones NodeJS en un VPS: Raul Alhena

name: Server Integration

# Controla cuando la acción se iniciará. 
on:
  # Disparador del workflow, la condición que se tiene que cumplir para poner en 
  # marcha el worwflow, en este caso: realizar un push en la rama main del repositorio
  push:
    branches: [ main ]

# Este es el proceso de acciones que se van a ejecutar, pueden ejecutarse de un job a varios,
# tanto secuancialmente en paralelo
jobs:
  # Definimos un job llamado "testing"
  testing:
    # El sistema en el que se ejecutará el job
    runs-on: ubuntu-latest

    # steps representa la secuencia de tareas que se ejecutarán como parte del job
    steps:
    - name: Integration using ssh
      uses: appleboy/ssh-action@master
      # Usamos variables de entorno del propio Github para no exponer información delicada
      env:
        GITHUB_TOKEN: ${{ secrets.WORDPRESS_TOKEN }}
      with:
        host: ${{ secrets.DIGITAL_HOST }}
        username: ${{ secrets.DIGITAL_USERNAME }}
        key: ${{ secrets.DIGITAL_PRIVATE_KEY }}
        port: 22
        # En esta sección se ejecutan los comando sobre el sistema para conseguir la integración
        script: |
          cd /home/${{ secrets.DIGITAL_USERNAME }}/
          ls -al 
  # Definimos un job llamado "build" que se ejecutará una vez el job "testing" haya finalizado
  # para eso usamos la propiedad "needs"
  build:
    needs: testing
    # El sistema en el que se ejecutará el job
    runs-on: ubuntu-latest

    # steps representa la secuencia de tareas que se ejecutarán como parte del job
    steps:
    - name: Integration using ssh
      uses: appleboy/ssh-action@master
      # Usamos variables de entorno del propio Github para no exponer información delicada
      env:
        GITHUB_TOKEN: ${{ secrets.WORDPRESS_TOKEN }}
      with:
        host: ${{ secrets.DIGITAL_HOST }}
        username: ${{ secrets.DIGITAL_USERNAME }}
        key: ${{ secrets.DIGITAL_PRIVATE_KEY }}
        port: 22
        # En esta sección se ejecutan los comando sobre el sistema para conseguir la integración
        script: |
          cd /home/${{ secrets.DIGITAL_USERNAME }}/
          ls -al 


  Git:

    runs-on: ubuntu-latest
        
    steps:
      - uses: actions/checkout@v3
      - name: Build the Docker image
        run: docker compose up -d 
        
  Github:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to GitHub Container Registry
      run: echo "${{ secrets.WORDPRESS_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
    - name: Build and push Docker image
      run: |
        docker compose build
        docker compose push
        # Or if you want to tag your image before pushing:
        # docker tag your_image_name:latest ghcr.io/your_username/your_image_name:latest
        # docker push ghcr.io/your_username/your_image_name:latest
